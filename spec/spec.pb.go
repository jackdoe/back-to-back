// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spec.proto

package spec

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_UNKNOWN                MessageType = 0
	MessageType_REPLY                  MessageType = 1
	MessageType_ERROR                  MessageType = 2
	MessageType_EMPTY                  MessageType = 3
	MessageType_REQUEST                MessageType = 4
	MessageType_ERROR_BROKER_FULL      MessageType = 5
	MessageType_ERROR_CONSUMER_TIMEOUT MessageType = 6
	MessageType_ERROR_CONSUMER_SEND    MessageType = 7
	MessageType_ERROR_CONSUMER_RECEIVE MessageType = 8
	MessageType_ERROR_CONSUMER_BROKEN  MessageType = 9
)

var MessageType_name = map[int32]string{
	0: "UNKNOWN",
	1: "REPLY",
	2: "ERROR",
	3: "EMPTY",
	4: "REQUEST",
	5: "ERROR_BROKER_FULL",
	6: "ERROR_CONSUMER_TIMEOUT",
	7: "ERROR_CONSUMER_SEND",
	8: "ERROR_CONSUMER_RECEIVE",
	9: "ERROR_CONSUMER_BROKEN",
}

var MessageType_value = map[string]int32{
	"UNKNOWN":                0,
	"REPLY":                  1,
	"ERROR":                  2,
	"EMPTY":                  3,
	"REQUEST":                4,
	"ERROR_BROKER_FULL":      5,
	"ERROR_CONSUMER_TIMEOUT": 6,
	"ERROR_CONSUMER_SEND":    7,
	"ERROR_CONSUMER_RECEIVE": 8,
	"ERROR_CONSUMER_BROKEN":  9,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{0}
}

type Message struct {
	Topic               string      `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Type                MessageType `protobuf:"varint,2,opt,name=type,proto3,enum=spec.MessageType" json:"type,omitempty"`
	Data                []byte      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Uuid                uint64      `protobuf:"varint,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TimeoutAfterMs      uint32      `protobuf:"varint,6,opt,name=timeoutAfterMs,proto3" json:"timeoutAfterMs,omitempty"`
	TimeoutAtNanosecond uint64      `protobuf:"varint,7,opt,name=timeoutAtNanosecond,proto3" json:"timeoutAtNanosecond,omitempty"`
	RetryTTL            uint32      `protobuf:"varint,8,opt,name=retryTTL,proto3" json:"retryTTL,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Message) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_UNKNOWN
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetUuid() uint64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *Message) GetTimeoutAfterMs() uint32 {
	if m != nil {
		return m.TimeoutAfterMs
	}
	return 0
}

func (m *Message) GetTimeoutAtNanosecond() uint64 {
	if m != nil {
		return m.TimeoutAtNanosecond
	}
	return 0
}

func (m *Message) GetRetryTTL() uint32 {
	if m != nil {
		return m.RetryTTL
	}
	return 0
}

type Poll struct {
	Topic []string `protobuf:"bytes,10,rep,name=topic,proto3" json:"topic,omitempty"`
}

func (m *Poll) Reset()         { *m = Poll{} }
func (m *Poll) String() string { return proto.CompactTextString(m) }
func (*Poll) ProtoMessage()    {}
func (*Poll) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{1}
}
func (m *Poll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Poll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Poll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Poll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Poll.Merge(m, src)
}
func (m *Poll) XXX_Size() int {
	return m.Size()
}
func (m *Poll) XXX_DiscardUnknown() {
	xxx_messageInfo_Poll.DiscardUnknown(m)
}

var xxx_messageInfo_Poll proto.InternalMessageInfo

func (m *Poll) GetTopic() []string {
	if m != nil {
		return m.Topic
	}
	return nil
}

func init() {
	proto.RegisterEnum("spec.MessageType", MessageType_name, MessageType_value)
	proto.RegisterType((*Message)(nil), "spec.Message")
	proto.RegisterType((*Poll)(nil), "spec.Poll")
}

func init() { proto.RegisterFile("spec.proto", fileDescriptor_423806180556987f) }

var fileDescriptor_423806180556987f = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0xce, 0xd2, 0x40,
	0x14, 0xc5, 0x3b, 0x50, 0x28, 0xdc, 0x4f, 0xbf, 0xcc, 0x37, 0x80, 0x56, 0x62, 0x9a, 0x86, 0x44,
	0xd3, 0xb8, 0x20, 0x06, 0x9f, 0x40, 0x70, 0x4c, 0x08, 0xfd, 0x83, 0x43, 0xab, 0x61, 0x45, 0x4a,
	0x19, 0x0d, 0x11, 0x99, 0xa6, 0x1d, 0x12, 0xeb, 0x53, 0xf8, 0x58, 0x26, 0x6e, 0x58, 0xba, 0x34,
	0xe0, 0x83, 0x98, 0x0e, 0x8a, 0x86, 0xb0, 0x69, 0x7e, 0xf7, 0x9c, 0x7b, 0x4f, 0x73, 0x92, 0x01,
	0xc8, 0x53, 0x9e, 0xf4, 0xd3, 0x4c, 0x48, 0x41, 0xf4, 0x92, 0x7b, 0xbf, 0x10, 0x18, 0x1e, 0xcf,
	0xf3, 0xf8, 0x03, 0x27, 0x6d, 0xa8, 0x49, 0x91, 0xae, 0x13, 0x13, 0xd9, 0xc8, 0x69, 0xb2, 0xd3,
	0x40, 0x9e, 0x80, 0x2e, 0x8b, 0x94, 0x9b, 0x15, 0x1b, 0x39, 0xb7, 0x83, 0xbb, 0xbe, 0x8a, 0xf8,
	0x73, 0x12, 0x16, 0x29, 0x67, 0xca, 0x26, 0x04, 0xf4, 0x55, 0x2c, 0x63, 0xb3, 0x6a, 0x23, 0xe7,
	0x1e, 0x53, 0x5c, 0x6a, 0xbb, 0xdd, 0x7a, 0x65, 0xea, 0x36, 0x72, 0x74, 0xa6, 0x98, 0x3c, 0x85,
	0x5b, 0xb9, 0xfe, 0xc4, 0xc5, 0x4e, 0xbe, 0x7c, 0x2f, 0x79, 0xe6, 0xe5, 0x66, 0xdd, 0x46, 0xce,
	0x7d, 0x76, 0xa1, 0x92, 0xe7, 0xd0, 0xfa, 0xab, 0x48, 0x3f, 0xde, 0x8a, 0x9c, 0x27, 0x62, 0xbb,
	0x32, 0x0d, 0x15, 0x75, 0xcd, 0x22, 0x5d, 0x68, 0x64, 0x5c, 0x66, 0x45, 0x18, 0xba, 0x66, 0x43,
	0x65, 0x9e, 0xe7, 0xde, 0x63, 0xd0, 0xa7, 0x62, 0xb3, 0xf9, 0x57, 0x11, 0xec, 0xea, 0xb9, 0xe2,
	0xb3, 0xef, 0x08, 0x6e, 0xfe, 0x6b, 0x44, 0x6e, 0xc0, 0x88, 0xfc, 0x89, 0x1f, 0xbc, 0xf3, 0xb1,
	0x46, 0x9a, 0x50, 0x63, 0x74, 0xea, 0xce, 0x31, 0x2a, 0x91, 0x32, 0x16, 0x30, 0x5c, 0x51, 0xe8,
	0x4d, 0xc3, 0x39, 0xae, 0x96, 0xdb, 0x8c, 0xbe, 0x89, 0xe8, 0x2c, 0xc4, 0x3a, 0xe9, 0xc0, 0x9d,
	0x5a, 0x59, 0x0c, 0x59, 0x30, 0xa1, 0x6c, 0xf1, 0x3a, 0x72, 0x5d, 0x5c, 0x23, 0x5d, 0x78, 0x70,
	0x92, 0x47, 0x81, 0x3f, 0x8b, 0x3c, 0xca, 0x16, 0xe1, 0xd8, 0xa3, 0x41, 0x14, 0xe2, 0x3a, 0x79,
	0x08, 0xad, 0x0b, 0x6f, 0x46, 0xfd, 0x57, 0xd8, 0xb8, 0x72, 0xc4, 0xe8, 0x88, 0x8e, 0xdf, 0x52,
	0xdc, 0x20, 0x8f, 0xa0, 0x73, 0xe1, 0xa9, 0x1f, 0xfa, 0xb8, 0x39, 0x1c, 0x7c, 0x3b, 0x58, 0x68,
	0x7f, 0xb0, 0xd0, 0xcf, 0x83, 0x85, 0xbe, 0x1e, 0x2d, 0x6d, 0x7f, 0xb4, 0xb4, 0x1f, 0x47, 0x4b,
	0x83, 0xf6, 0xe7, 0xe2, 0x4b, 0x7f, 0x19, 0x27, 0x1f, 0xa5, 0x28, 0xbf, 0xa7, 0x87, 0x30, 0xac,
	0x8c, 0x83, 0x65, 0x5d, 0xe1, 0x8b, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x0b, 0x4c, 0x77,
	0x21, 0x02, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Topic) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Type))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Uuid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Uuid))
	}
	if m.TimeoutAfterMs != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.TimeoutAfterMs))
	}
	if m.TimeoutAtNanosecond != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.TimeoutAtNanosecond))
	}
	if m.RetryTTL != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.RetryTTL))
	}
	return i, nil
}

func (m *Poll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Poll) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Topic) > 0 {
		for _, s := range m.Topic {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintSpec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSpec(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Uuid != 0 {
		n += 1 + sovSpec(uint64(m.Uuid))
	}
	if m.TimeoutAfterMs != 0 {
		n += 1 + sovSpec(uint64(m.TimeoutAfterMs))
	}
	if m.TimeoutAtNanosecond != 0 {
		n += 1 + sovSpec(uint64(m.TimeoutAtNanosecond))
	}
	if m.RetryTTL != 0 {
		n += 1 + sovSpec(uint64(m.RetryTTL))
	}
	return n
}

func (m *Poll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topic) > 0 {
		for _, s := range m.Topic {
			l = len(s)
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	return n
}

func sovSpec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpec(x uint64) (n int) {
	return sovSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			m.Uuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uuid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutAfterMs", wireType)
			}
			m.TimeoutAfterMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutAfterMs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutAtNanosecond", wireType)
			}
			m.TimeoutAtNanosecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutAtNanosecond |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryTTL", wireType)
			}
			m.RetryTTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryTTL |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Poll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Poll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Poll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = append(m.Topic, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpec   = fmt.Errorf("proto: integer overflow")
)
